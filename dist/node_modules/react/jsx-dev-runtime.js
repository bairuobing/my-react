(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	// 用来唯一标记 ReactElement 类型，防止滥用 ReactElement 类型
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7; // 为什么用 16 进制的值

	// ReactElement
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'brb'
	    };
	    return element;
	};
	// react 17 之前，jsx 转换用的 React.createElement 方法，17 之后用的 _jsx 方法
	const jsx = (type, config, key = null) => {
	    let ref = null;
	    const props = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 和 kasong 实现的不太一样
	        if (prop === 'children') {
	            const childrenLength = val.length;
	            if (childrenLength) {
	                if (childrenLength === 1) {
	                    props.children = val[0];
	                }
	                else {
	                    props.children = val;
	                }
	            }
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	// 开发环境 jsx
	const jsxDEV = jsx;

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
